== Paypal Permissions

{<img src="https://secure.travis-ci.org/moshbit/devise.png" />}[http://travis-ci.org/moshbit/devise]

Paypal Permissions provides a gateway to the PayPal Permissions Service for Rails applications based on ActiveMerchant. It:

* leverages ActiveMerchant;
* does other good things.

It's comprised of stuff:

* Database Authenticatable: encrypts and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.
* Token Authenticatable: signs in a user based on an authentication token (also known as "single access token"). The token can be given both through query string or HTTP Basic Authentication.
* Omniauthable: adds Omniauth (github.com/intridea/omniauth) support;
* Confirmable: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.
* Recoverable: resets the user password and sends reset instructions.

== Information

=== The Paypal Permissions wiki

The Paypal Permissions Wiki has lots of additional information, including many "how-to" articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:

https://wiki.github.com/moshbit/paypal_permissions

=== Bug reports

If you discover a problem with Paypal Permissions, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:

https://github.com/moshbit/paypal_permissions/wiki/Bug-reports

If you found a security bug, do *NOT* use the GitHub issue tracker. Send email or a private GitHub message to the maintainers listed at the bottom of the README.

=== Mailing list

If you have any questions, comments, or concerns, please use the Google Group instead of the GitHub issue tracker:

https://groups.google.com/group/moshbit-paypal_permissions

=== RDocs

You can view the Devise documentation in RDoc format here:

http://rubydoc.info/github/moshbit/paypal_permissions/master/frames

=== Example applications

There are a few example applications available on GitHub that demonstrate various features of Paypal Permissions. You can view them here:

https://github.com/moshbit/paypal_permissions/wiki/Example-Applications

=== Extensions

Our community has created a number of extensions that add functionality above and beyond what is included with Paypal Permissions. You can view a list of available extensions and add your own here:

https://github.com/moshbit/paypal_permissions/wiki/Extensions

=== Contributing

We hope that you will consider contributing to Paypal_Permissions. Please read this short overview for some information about how to get started:

https://github.com/moshbit/paypal_permissions/wiki/Contributing

You will usually want to write tests for your changes.  To run the test suite, `cd` into Paypal_Permissions's top-level directory and run `bundle install` and `rake`.  For the tests to pass, you will need to have a MongoDB server (version 2.0 or newer) running on your system.

== Installation

You can use the latest Rails 3 gem with the latest Paypal_Permissions gem:

  gem install paypal_permissions

After you install Paypal_Permissions and add it to your Gemfile, you need to run the generator:

  rails generate paypal_permissions:install

The generator will install an initializer which describes ALL Paypal_Permissions's configuration options and you MUST take a look at it. When you are done, you are ready to add Paypal_Permissions to any of your models using the generator:

  rails generate paypal_permissions MODEL

Replace MODEL by the class name used for the applications users, it's frequently 'User' but could also be 'Admin'. This will create a model (if one does not exist) and configure it with default Paypal_Permissions modules. Next, you'll usually run db:migrate as the generator will have created a migration file (if your ORM supports them). This generator also configures your config/routes.rb file, continue reading this file to understand exactly what the generator produces and how to use it. Finally, if your server was already running, then restart it as Rails doesn't automatically load methods from a new gem.

Support for Rails 2.3.x can be found by installing Paypal_Permissions 1.0.x from the v1.0 branch.

== Starting with Rails?

If you are building your first Rails application, we recommend you to *not* use Paypal_Permissions. Paypal_Permissions requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch, today we have two resources:

* Michael Hartl's online book: http://railstutorial.org/chapters/modeling-and-viewing-users-two#top
* Ryan Bates' Railscast: http://railscasts.com/episodes/250-authentication-from-scratch

Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Paypal_Permissions will be very pleasant to work with. :)

== Getting started

This is a walkthrough with all steps you need to setup a paypal_permissions resource, including model, migration, route files, and optional configuration.

Paypal_Permissions must be set up within the model (or models) you want to use. Paypal_Permissions routes must be created inside your config/routes.rb file.

We're assuming here you want a User model with some Paypal_Permissions modules, as outlined below:

  class User < ActiveRecord::Base
    paypal_permissions :database_authenticatable, :registerable, :confirmable, :recoverable, :rememberable, :trackable, :validatable
  end

After you choose which modules to use, you need to set up your migrations. Luckily, Paypal_Permissions has some helpers to save you from this boring work:

  create_table :users do |t|
    t.database_authenticatable
    t.confirmable
    t.recoverable
    t.rememberable
    t.trackable
    t.timestamps
  end

Paypal_Permissions doesn't use _attr_accessible_ or _attr_protected_ inside its modules, so be sure to define attributes as accessible or protected in your model.

Configure your routes after setting up your model. Open your config/routes.rb file and add:

  paypal_permissions_for :users

This will use your User model to create a set of needed routes (you can see them by running `rake routes`). If you invoked the paypal_permissions generator, you noticed that this is exactly what the generator produces for us: model, routes and migrations.

Don't forget to run rake db:migrate and you are ready to go! But don't stop reading here, we still have a lot to tell you.

=== Controller filters and helpers

Paypal_Permissions will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_filter:

  before_filter :authenticate_user!

To verify if a user is signed in, use the following helper:

  user_signed_in?

For the current signed-in user, this helper is available:

  current_user

You can access the session for this scope:

  user_session

After signing in a user, confirming the account or updating the password, Paypal_Permissions will look for a scoped root path to redirect. Example: For a :user resource, it will use user_root_path if it exists, otherwise default root_path will be used. This means that you need to set the root inside your routes:

  root :to => "home#index"

You can also overwrite after_sign_in_path_for and after_sign_out_path_for to customize your redirect hooks.

Finally, you need to set up default url options for the mailer in each environment. Here is the configuration for config/environments/development.rb:

  config.action_mailer.default_url_options = { :host => 'localhost:3000' }

Notice that if your paypal_permissions model is not called "user" but "member", then the helpers you should use are:

  before_filter :authenticate_member!

  member_signed_in?

  current_member

  member_session

=== Configuring Models

The paypal_permissions method in your models also accepts some options to configure its modules. For example, you can choose which encryptor to use in database_authenticatable:

  paypal_permissions :database_authenticatable, :registerable, :confirmable, :recoverable, :stretches => 20

Besides :stretches, you can define :pepper, :encryptor, :confirm_within, :remember_for, :timeout_in, :unlock_in and other values. For details, see the initializer file that was created when you invoked the "paypal_permissions:install" generator described above.

=== Configuring multiple models

Paypal_Permissions allows you to set up as many roles as you want. For example, you may have a User model and also want an Admin model with just authentication, trackable, lockable and timeoutable features and no confirmation or password-recovery features. Just follow these steps:

  # Create a migration with the required fields
  create_table :admins do |t|
    t.database_authenticatable
    t.lockable
    t.trackable
    t.timestamps
  end

  # Inside your Admin model
  paypal_permissions :database_authenticatable, :trackable, :timeoutable, :lockable

  # Inside your routes
  paypal_permissions_for :admins

  # Inside your protected controller
  before_filter :authenticate_admin!

  # Inside your controllers and views
  admin_signed_in?
  current_admin
  admin_session

=== Configuring views

We built Paypal_Permissions to help you quickly develop an application that uses authentication. However, we don't want to be in your way when you need to customize it.

Since Paypal_Permissions is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:

  rails generate paypal_permissions:views

If you have more than one role in your application (such as "User" and "Admin"), you will notice that Paypal_Permissions uses the same views for all roles. Fortunately, Paypal_Permissions offers an easy way to customize views. All you need to do is set "config.scoped_views = true" inside "config/initializers/paypal_permissions.rb".

After doing so, you will be able to have views based on the role like "users/sessions/new" and "admins/sessions/new". If no view is found within the scope, Paypal_Permissions will use the default view at "paypal_permissions/sessions/new". You can also use the generator to generate scoped views:

  rails generate paypal_permissions:views users

=== Configuring controllers

If the customization at the views level is not enough, you can customize each controller by following these steps:

1) Create your custom controller, for example a Admins::SessionsController:

    class Admins::SessionsController < Paypal_Permissions::SessionsController
    end

2) Tell the router to use this controller:

    paypal_permissions_for :admins, :controllers => { :sessions => "admins/sessions" }

3) And since we changed the controller, it won't use the "paypal_permissions/sessions" views, so remember to copy "paypal_permissions/sessions" to "admin/sessions".

Remember that Paypal_Permissions uses flash messages to let users know if sign in was successful or failed. Paypal_Permissions expects your application to call "flash[:notice]" and "flash[:alert]" as appropriate.

=== Configuring routes

Paypal_Permissions also ships with default routes. If you need to customize them, you should probably be able to do it through the paypal_permissions_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:

  paypal_permissions_for :users, :path => "usuarios", :path_names => { :sign_in => 'login', :sign_out => 'logout', :password => 'secret', :confirmation => 'verification', :unlock => 'unblock', :registration => 'register', :sign_up => 'cmon_let_me_in' }

Be sure to check paypal_permissions_for documentation for details.

If you have the need for more deep customization, for instance to also allow "/sign_in" besides "/users/sign_in", all you need to do is to create your routes normally and wrap them in a +paypal_permissions_scope+ block in the router:

  paypal_permissions_scope :user do
    get "sign_in", :to => "paypal_permissions/sessions#new"
  end

This way you tell paypal_permissions to use the scope :user when "/sign_in" is accessed. Notice +paypal_permissions_scope+ is also aliased as +as+ and you can also give a block to +paypal_permissions_for+, resulting in the same behavior:

  paypal_permissions_for :users do
    get "sign_in", :to => "paypal_permissions/sessions#new"
  end

Feel free to choose the one you prefer!

=== I18n

Paypal_Permissions uses flash messages with I18n with the flash keys :notice and :alert. To customize your app, you can set up your locale file:

  en:
    paypal_permissions:
      sessions:
        signed_in: 'Signed in successfully.'

You can also create distinct messages based on the resource you've configured using the singular name given in routes:

  en:
    paypal_permissions:
      sessions:
        user:
          signed_in: 'Welcome user, you are signed in.'
        admin:
          signed_in: 'Hello admin!'

The Paypal_Permissions mailer uses a similar pattern to create subject messages:

  en:
    paypal_permissions:
      mailer:
        confirmation_instructions:
          subject: 'Hello everybody!'
          user_subject: 'Hello User! Please confirm your email'
        reset_password_instructions:
          subject: 'Reset instructions'

Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:

https://github.com/moshbit/paypal_permissions/wiki/I18n

=== Test helpers

Paypal_Permissions includes some tests helpers for functional specs. To use them, you just need to include Paypal_Permissions::TestHelpers in your test class and use the sign_in and sign_out method. Such methods have the same signature as in controllers:

  sign_in :user, @user   # sign_in(scope, resource)
  sign_in @user          # sign_in(resource)

  sign_out :user         # sign_out(scope)
  sign_out @user         # sign_out(resource)

You can include the Paypal_Permissions Test Helpers in all of your tests by adding the following to the bottom of your test/test_helper.rb file:

  class ActionController::TestCase
    include Paypal_Permissions::TestHelpers
  end

If you're using RSpec and want the helpers automatically included within all +describe+ blocks, add a file called spec/support/paypal_permissions.rb with the following contents:

  RSpec.configure do |config|
    config.include Paypal_Permissions::TestHelpers, :type => :controller
  end

Do not use such helpers for integration tests such as Cucumber or Webrat. Instead, fill in the form or explicitly set the user in session. For more tips, check the wiki (https://wiki.github.com/moshbit/paypal_permissions).

=== Omniauth

Paypal_Permissions comes with Omniauth support out of the box to authenticate from other providers. You can read more about Omniauth support in the wiki:

* https://github.com/moshbit/paypal_permissions/wiki/OmniAuth:-Overview

=== Other ORMs

Paypal_Permissions supports ActiveRecord (default) and Mongoid. To choose other ORM, you just need to require it in the initializer file.

=== Migrating from other solutions

Paypal_Permissions implements encryption strategies for Clearance, Authlogic and Restful-Authentication. To make use of these strategies, you need set the desired encryptor in the encryptor initializer config option and add :encryptable to your model. You might also need to rename your encrypted password and salt columns to match Paypal_Permissions's fields (encrypted_password and password_salt).

== Troubleshooting

=== Heroku

Using paypal_permissions on Heroku with Ruby on Rails 3.1 requires setting:

  config.assets.initialize_on_precompile = false

Read more about the potential issues at http://guides.rubyonrails.org/asset_pipeline.html

== Additional information

=== Warden

Paypal_Permissions is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:

https://github.com/hassox/warden

=== Contributors

We have a long list of valued contributors. Check them all at:

https://github.com/moshbit/paypal_permissions/contributors

=== Maintainers

* Mark Paine (https://github.com/moshbit)

== License

MIT License. Copyright 2012 Moshbit. http://blog.moshbit.com
